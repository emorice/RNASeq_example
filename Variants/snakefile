import re
from glob import glob

def collect(_):
    fastq = glob("exome/*.fastq.gz")
    quality = [
        re.sub(r'exome/(.*)\.fastq\.gz', r'quality/exome/\1_fastqc.html', f)
        for f in fastq
        ]
    # Keep whatever is before the last '1' or '2' in the file names as sequence
    # identifier. This should work with many naming schemes
    basepaths = set(
        re.sub(r'^exome/(.*)[12][^12]*$', r'\1', f)
        for f in fastq
        )
    trimmed = [ "trimmed/" + p + '.' + r + ".fastq" for p in basepaths for r in
            ["R1P", "R2P", "R1U", "R2U"]
            ]
    quality += [
        re.sub(r'trimmed/(.*).fastq', r'quality/trimmed/\1_fastqc.html', f)
        for f in trimmed
        ]
    return quality + ["variants.features"]

rule all:
    input:
        collect

rule get_exome:
    output:
        "exome.tar.gz"
    shell:
        """
        HREF=$(wget \
                --save-cookies=cookies.txt \
                'https://drive.google.com/uc?id=1DM9g8OulE1ScBk-HoaREfUZs6gurtkBe&export=download' \
                -O - | \
            sed -rn 's/&amp;/\&/g ; s/.*<a id="uc-download-link"[^>]*href="([^"]*)".*/\\1/p' \
            )
        wget --load-cookies=cookies.txt "https://drive.google.com$HREF" -O {output}
        rm -f cookies.txt
        """

checkpoint deflate:
    input:
        "exome.tar.gz"
    output:
        directory("exome")
    shell:
        """
        mkdir exome
        tar xvf {input} --strip-components=1 -C exome
        """


rule fastqc:
	input:
		'{stage}/{seq}.fastq'
	output:
		'quality/{stage}/{seq}_fastqc.html'
	shell:
		"""
		fastqc "{input}" -o `dirname {output}`
		"""
rule fastqcgz:
	input:
		'{stage}/{seq}.fastq.gz'
	output:
		'quality/{stage}/{seq}_fastqc.html'
	shell:
		"""
		fastqc "{input}" -o `dirname {output}`
		"""

def paired(w):
    return sorted(glob("exome/{}*".format(w.seq)))

rule trim:
	input:
		paired
	output:
		'trimmed/{seq}.R1P.fastq',
		'trimmed/{seq}.R1U.fastq',
		'trimmed/{seq}.R2P.fastq',
		'trimmed/{seq}.R2U.fastq'
	shell:
		"""
		trimmomatic PE {input} {output} LEADING:20 TRAILING:20 MINLEN:50
		"""

rule get_chr16:
    output:
        "orig_chr16.fa.gz"
    shell:
        "wget 'http://hgdownload.soe.ucsc.edu/goldenPath/hg19/chromosomes/chr16.fa.gz' -O {output}"

rule index_16:
    input:
        "orig_chr16.fa.gz"
    output:
        "chr16.fa.gz",
        "chr16.fa.gz.sa"
    shell:
        """
        gzip -cd {input} | bgzip > {output[0]}
        bwa index -a bwtsw {output[0]}
        """
rule bwmap:
    input:
        "chr16.fa.gz",
        "chr16.fa.gz.sa",
        "trimmed/{seq}.R1P.fastq",
        "trimmed/{seq}.R2P.fastq",
    output:
        "mapped/{seq}.sam"
    shell:
        """
        bwa mem -M -t 2 -A 2 -E 1 {input[0]} {input[2]} {input[3]} > {output}
        """

rule postmap:
    input:
        "mapped/{seq}.sam"
    output:
        "mapped/{seq}.bam",
        "sorted/{seq}.bam",
        "sorted/{seq}.bam.bai"
    shell:
        """
        samtools view -S -b {input} > {output[0]}
        samtools sort {output[0]} -o {output[1]}
        samtools index {output[1]}
        samtools flagstat {output[1]}
        """

rule pileup:
    input:
        "chr16.fa.gz",
        "sorted/{seq}.bam",
        "sorted/{seq}.bam.bai"
    output:
        "sorted/{seq}.mpileup",
    shell:
        """
        samtools mpileup -B -A -f {input[0]} {input[1]} > {output}
        """

def both_pileup(_):
    """
    Assumes your original files are lexicographically sorted as "normal tumor",
    which is the case if you name them "something-<N/T>-something",
    "something-<normal>-<tumor>" etc.
    """
    return sorted(glob("sorted/*.mpileup"))

rule varscan:
    input:
        both_pileup
    output:
        "variants.indel.vcf",
        "variants.snp.vcf"
    shell:
        """
        varscan somatic {input} variants --variants --p-value 0.001 --min-avg-qual 15 --output-vcf 1
        """

rule get_annot:
    output:
        "gencode.v24lift37.basic.annotation.gtf.gz"
    shell:
        "wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_24/GRCh37_mapping/gencode.v24lift37.basic.annotation.gtf.gz"

rule annot:
    input:
        "variants.indel.vcf",
        "variants.snp.vcf",
        "gencode.v24lift37.basic.annotation.gtf.gz"
    output:
        "variants.features"
    shell:
        """
        grep -h ';SOMATIC;' {input[0]} {input[1]} | \
        awk '{{OFS="\\t"; if (!/^#/){{print $1,$2-1,$2,$4"/"$5,"+"}}}}' | \
        bedtools intersect -a {input[2]} -b /dev/stdin > {output}
        """

